-- 1- Rank the customers based on the total amount they've spent on rentals--
SELECT
    customer_id,
    SUM(amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(amount) DESC) AS spending_rank
FROM
    payment
GROUP BY
    customer_id
ORDER BY
    spending_rank;


-- 2 calculate the cumulative revenue generated by each film over time--
SELECT 
    f.film_id,
    f.title,
    r.rental_date,
    SUM(p.amount) OVER (
        PARTITION BY f.film_id 
        ORDER BY r.rental_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_revenue
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
JOIN 
    payment p ON r.rental_id = p.rental_id
ORDER BY 
    f.film_id, r.rental_date;
    
    -- 3. determine the average rental duration for each film,considering films with similar lengths--
    select title, rental_rate,
avg(rental_rate) over(),
rank() over(order by rental_rate asc)
from film ; 

-- 4. identify the top 3 films in each category based on their rental counts--

SELECT 
    category,
    title,
    rental_count,
    rank
FROM (
    SELECT 
        c.name AS category,
        f.title,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (
            PARTITION BY c.name 
            ORDER BY COUNT(r.rental_id) DESC
        ) AS rank
    FROM 
        film f
    JOIN 
        film_category fc ON f.film_id = fc.film_id
    JOIN 
        category c ON fc.category_id = c.category_id
    JOIN 
        inventory i ON f.film_id = i.film_id
    JOIN 
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        c.name, f.title
) AS ranked_films
WHERE 
    rank <= 3
ORDER BY 
    category, rank;
    
    -- 5- calculate the difference in rental counts between each customers total rentals and the average rentals across all customers--
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(r.rental_id) AS total_rentals,
    ROUND(AVG(COUNT(r.rental_id)) OVER (), 2) AS avg_rentals_all_customers,
    COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_diff
FROM 
    customer c
JOIN 
    rental r ON c.customer_id = r.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    rental_diff DESC;
    
    -- 6-- find the monthly revenue trend for the entire rental store over time-- 
    SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue,
    SUM(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS running_total,
    SUM(amount) - LAG(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS revenue_difference,
    ROUND(
        (SUM(amount) - LAG(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')))
        / LAG(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) * 100, 2
    ) AS percent_growth
FROM
    payment
GROUP BY
    DATE_FORMAT(payment_date, '%Y-%m')
ORDER BY
    month;
    
    -- 7- identify the  customers whose total spending on rentals falls within the top 20% of all customers--
WITH customer_spending AS (
    SELECT
        customer_id,
        SUM(amount) AS total_spent
    FROM
        payment
    GROUP BY
        customer_id
),
ranked_customers AS (
    SELECT
        customer_id,
        total_spent,
        NTILE(5) OVER (ORDER BY total_spent DESC) AS spending_percentile
    FROM
        customer_spending
)
SELECT
    customer_id,
    total_spent
FROM
    ranked_customers
WHERE
    spending_percentile = 1
ORDER BY
    total_spent DESC;


-- 8--  calculate the running total of rentals per category,ordered by rental count--
    WITH category_rental_count AS (
    SELECT
        c.name AS category,
        COUNT(r.rental_id) AS rental_count
    FROM
        rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film f ON i.film_id = f.film_id
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
    GROUP BY
        c.name
),
running_totals AS (
    SELECT
        category,
        rental_count,
        SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
    FROM
        category_rental_count
)
SELECT *
FROM running_totals
ORDER BY rental_count DESC;


-- 9-- find the films that have been rented less than the average retnal count for their respective categories-- 
WITH film_category_rentals AS (
    SELECT
        f.film_id,
        f.title,
        c.name AS category,
        COUNT(r.rental_id) AS rental_count
    FROM
        film f
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
    GROUP BY
        f.film_id, f.title, c.name
),
film_with_category_avg AS (
    SELECT
        film_id,
        title,
        category,
        rental_count,
        AVG(rental_count) OVER (PARTITION BY category) AS avg_category_rental
    FROM
        film_category_rentals
)
SELECT
    film_id,
    title,
    category,
    rental_count,
    avg_category_rental
FROM
    film_with_category_avg
WHERE
    rental_count < avg_category_rental
ORDER BY
    category, rental_count;

-- 10-- identify the top 5 months with the highest revenue and display the revenue generated in each month-- 
WITH monthly_revenue AS (
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM
        payment
    GROUP BY
        DATE_FORMAT(payment_date, '%Y-%m')
),
ranked_months AS (
    SELECT
        month,
        total_revenue,
        RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank
    FROM
        monthly_revenue
)
SELECT
    month,
    total_revenue
FROM
    ranked_months
WHERE
    revenue_rank <= 5
ORDER BY
    total_revenue DESC;

